//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;
// ERC20
import "../lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
// 2771 context
import "../lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol";
import {Address} from "../lib/openzeppelin-contracts/contracts/utils/Address.sol";
import "forge-std/console.sol";

contract ThirdWebSimpleERC20 is ERC20, ERC2771Context {
    
    // passing in the trusted forwarder address to the constructor of ERC2771Context
    constructor(
        string memory name_,
        string memory symbol_,
        address trustedForwarder_
    ) ERC20(name_, symbol_) ERC2771Context(trustedForwarder_) {}

    // mint function to mint tokens to an address
    function mint(address to, uint256 amount) external {
        _mint(to, amount);
    }

    // override the _msgSender() to use the ERC2771Context _msgSender()
    function _msgSender()
        internal
        view
        override(Context, ERC2771Context)
        returns (address sender)
    {
        return ERC2771Context._msgSender();
    }

    // override the _msgData() to use the ERC2771Context _msgData()
    function _msgData()
        internal
        view
        override(Context, ERC2771Context)
        returns (bytes calldata)
    {
        return ERC2771Context._msgData();
    }

    // override the _contextSuffixLength() to use the ERC2771Context _contextSuffixLength()
    function _contextSuffixLength()
        internal
        pure
        override(ERC2771Context, Context)
        returns (uint256)
    {
        return 20;
    }

    // the multicall function from old openzeppelin version, in new version vulberability have been patched.
    function multicall(
        bytes[] calldata data
    ) external returns (bytes[] memory results) {
        results = new bytes[](data.length);
        for (uint256 i = 0; i < data.length; i++) {
            results[i] = Address.functionDelegateCall(address(this), data[i]);
        }

        return results;
    }
}
